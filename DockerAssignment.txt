1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
   try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
	docker images --help ---> This command shows all the avaialble options and commands to work with docker images
	docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers
Ans :	docker -v
	Docker version 18.09.1, build 4c52b90


2. Find a image from dockerhub of your choice(recommeded: nginx), 
   don't use browser, pull the official image from dockerhub
Ans : docker pull nginx

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
Ans :  docker images

4. Find out the "Full" ImageId of the image that you pulled and write it below.
Ans : docker images --no-trunc

5. Create a container of your image 
Ans : docker run --name poonam hello-world
      docker container create --name poonam1 hello-world


6. List all the running containers
Ans : docker container ls

7. List all the running and stopped containers
Ans : docker ps -a
	For stopped containers: docker ps -a -f status=exited

8. Find out the "Full" containerId of the container and write it below.
Ans : docker inspect --format="{{.Id}}" poonam-container
	4ed821ce23269a6b9a19d19ef318c646f66404100100637f82dd2f817e441d56
	For all containers Id= docker ps -a --no-trunc -q

9. Find out how many image layers are used to build this image.
Ans : docker history --no-trunc image_name

10. Get the Apache Tomcat 7 server image from the docker hub.
Ans : docker run -it --rm -p 8888:8080 tomcat:7.0
      docker run -it --rm tomcat:7


11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
Ans : docker run -it --rm tomcat:7

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
Ans : docker inspect -f "{{ .NetworkSettings.IPAddress }}" poonam-tomcat-container
      172.17.0.34


13. Which Port it is using?
Ans : docker inspect -f "{{ .NetworkSettings.Ports}}" poonam-tomcat-container
      map[8080/tcp:[]]


14. Try to access the Tomcat's home page from your machine/vm.
Ans : 

15. What is the disk size of Apache Tomcat image?
Ans : docker image inspect -f "{{.Size}}" hello-world

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
Ans : docker image inspect -f "{{.ContainerConfig.Env}}" tomcat:7

	JAVA_HOME=/docker-java-home/jre JAVA_VERSION=7u181 JAVA_DEBIAN_VERSION=7u181-2.6.14-2~deb8u1 
	CATALINA_HOME=/usr/local/tomcat TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib OPENSSL_VERSION=1.1.0j-1~deb9u1 

17. Find out which port is exposed for tomcat?
Ans : docker inspect --format='{{.Config.ExposedPorts}}' tomcat:7

18. Run multiple conntainers of tomcat on different port and access it's home page.
Ans : 

19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
Ans : docker pull ubuntu

20. Run the container of ubuntu in attached mode.
Ans : 

21. Run the container of another ubuntu in detached mode.
22. Check how many ubuntu containers are running and stopped
23. Is the tomcat container running? If no, start one.
24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
26. Login as root user in ubuntu container
27. Create a file with any name in root directory
28. Install software of your choice in ubuntu container using "apt-get install"
29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
30. Check if the ubuntu container is running.
31. Create a new ubuntu container out of the same image as that previous container in attached mode.
32. Login as a root user
33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
35. Create an Image out of the existing container.
36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a ubuntu container, login into the ubuntu, install nginx, access nginx's home page from the container,
Now, come out of the ubuntu container and replace the existing index.html page of nginx with above index.html page that you created, Now access the nginx server from host machine, it should display the index.html that you have created.

39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a : docker images -a --> it gives you all images 
2. -f : docker images -f -->
3. -q

write atleast 1 command using each option above and prove their concepts as described in the --help.


40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
2. -f
3. -q
4. -n
5. -l
6. -s

write atleast 1 command using each option above and prove their concepts as described in the --help.


41. Type below command:-
	docker --help

you will various sections of commands apart from options like "Managemnet Commands" and "Commands".


Write some texts below describing the use of "Management Commands".



Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.
1. cp
2. create
3. export
4. history
5. info
6. login
7. logout
8. rename
9. save
10. stats
11. top



42. Kill all running container in one liner command.
43. Delete all images in one liner command.
44. Create a simple Dockerfile, build it and run it.
45. Create one or more Dockerfile that demostrate the following commands in Dockerfile (Write a PoC for each in one or more Dockerfile)
	1. USER
	2. RUN
	3. ENV
	4. CMD
	5. RUN
	6. ENTRYPOINT
	7. EXPOSE
	8. VOLUME
	
46. Dockerhub:-
	Find a application you care about on docker hub.
	Launch the container.
	Install another application in it.
	Save (commit) the image.
	Upload that to docker hub in your account and share it with a colleague, ask them to use your image and run the container out of it in their machine/vm.


